pipeline {
  agent {
    docker {
      image 'kuroko24/jenkins-slave:v7'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        // Ensure the Git repository is checked out
        checkout scm
        // OR use this if the repository details are not configured in Jenkins
        // git branch: 'main', url: 'https://github.com/NirajKapole/java-maven-argo-k8s.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "kuroko24/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "java-maven-argo-k8s"
        GIT_USER_NAME = "NirajKapole"
      }
      steps {
        dir('java-maven-argo-k8s') { // Explicitly move to the Git directory
          withCredentials([string(credentialsId: 'git-cred', variable: 'GITHUB_TOKEN')]) {
            sh '''
              git config user.email "nirajkapole6@gmail.com"
              git config user.name "NirajKapole"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}
